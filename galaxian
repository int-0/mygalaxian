#!/usr/bin/env python

import os.path
import sys
import pygame
import random

import game.common
from game.common import ImageRegistry

GAME_FPS = 30

MAX_STARS = 50

class Space:
    def __init__(self, destination):
        self.__layout = destination

        self.__maxx = self.__layout.get_rect().width
        self.__maxy = self.__layout.get_rect().height

        self.bg = ImageRegistry().get_image('data/playground.png')

        self.stars_spr = []
        self.stars_spr.append((ImageRegistry().get_image('data/star1.png'),
                               6, 8))
        self.stars_spr.append((ImageRegistry().get_image('data/star2.png'),
                               3, 5))
        self.stars_spr.append((ImageRegistry().get_image('data/star3.png'),
                               1, 2))

        self.stars = []
        for i in range(MAX_STARS):
            star = random.choice(self.stars_spr)
            self.stars.append((random.randint(0, self.__maxx),
                               random.randint(0, self.__maxy),
                               random.randint(star[1], star[2]),
                               star[0]))
            
    def update(self):
        self.__layout.blit(self.bg, (0, 0))

        for i in range(MAX_STARS):
            self.__layout.blit(self.stars[i][3],
                               (self.stars[i][0], self.stars[i][1]))
            self.stars[i] = (self.stars[i][0],
                            self.stars[i][1] + self.stars[i][2],
                            self.stars[i][2],
                            self.stars[i][3])
            if self.stars[i][1] > (self.__maxy + 10):
                star = random.choice(self.stars_spr)
                self.stars[i] = (random.randint(0, self.__maxx), -5,
                                 random.randint(star[1], star[2]),
                                 star[0])

class AsteroidField:
    def __init__(self, destination, max_asteroids = 10):
        self.__layout = destination
        self.__max_asteroids = max_asteroids

        self.__maxx = self.__layout.get_rect().width
        self.__maxy = self.__layout.get_rect().height

        self.asteroid = ImageRegistry().get_images('data/asteroid_1_')
        self.__asteroids = []

    def __rotate(self, surface, angle):
        original_rect = surface.get_rect()
        rotated_image = pygame.transform.rotate(surface, angle)
        rotated_rect = rotated_image.get_rect()
        clipped_rect = pygame.Rect(
            (rotated_rect.width - original_rect.width) / 2,
            (rotated_rect.height - original_rect.height) / 2,
            original_rect.width, original_rect.height)
        return rotated_image.subsurface(clipped_rect)

    def create_asteroid(self, x = None, vy = None):
        if len(self.__asteroids) >= self.__max_asteroids:
            return
        if x is None:
            x = random.randint(0, self.__maxx)
        if vy is None:
            vy = random.randint(1, 3)
        self.__asteroids.append((random.randint(0, len(self.asteroid) - 1),
                                 x, -100, vy))

    def update(self, shots = None):
        destroy = []
        for a in range(len(self.__asteroids)):
            ast = self.__asteroids[a]
            self.__layout.blit(self.asteroid[ast[0]], (ast[1], ast[2]))
            self.__asteroids[a] = ((ast[0] + 1) % len(self.asteroid),
                                   ast[1], ast[2] + ast[3], ast[3])
            if ast[2] > self.__maxy + 10:
                destroy.append(a)

            if not (shots is None):
                ar = pygame.Rect(ast[1], ast[2],
                                 self.asteroid[ast[0]].get_rect().width,
                                 self.asteroid[ast[0]].get_rect().height)
                collision = ar.collidelist(shots.areas())
                if (collision != -1):
                    destroy.append(a)
                    shots.destroy_shot(collision)

        for a in destroy:
            del(self.__asteroids[a])

class Player:
    def __init__(self, destination):
        self.__layout = destination

        self.ship = ImageRegistry().get_image('data/ship.png')

        self.__maxx = self.__layout.get_rect().width
        self.__maxy = self.__layout.get_rect().height

        self.x = int(self.__maxx - (self.ship.get_rect().width / 2) / 2)
        self.y = self.__maxy - self.ship.get_rect().height - 5

        self.__minpx = 0
        self.__maxpx = (self.__maxx - self.ship.get_rect().width)

        self.vx = 0
        self.max_v = 0

    def set_speed(self, vx):
        self.max_v = vx

    def update(self):
        if self.vx < self.max_v:
            self.vx += 1
        if self.vx > self.max_v:
            self.vx -= 1
        self.x += self.vx

        if self.x < self.__minpx:
            self.x = self.__minpx
        if self.x > self.__maxpx:
            self.x = self.__maxpx

        self.__layout.blit(self.ship, (self.x, self.y))

    def laser_pos(self):
        return (self.x + 22, self.y)

class PlayerShoot:
    def __init__(self, layout, max_shots = 1):
        self.__layout = layout

        self.shoot = ImageRegistry().get_image('data/shoot.png')
        self.__sw = self.shoot.get_rect().width
        self.__sh = self.shoot.get_rect().height

        self.shoot_sound = pygame.mixer.Sound('data/shoot.wav')

        self.__max_shots = max_shots
        self.__shots = []

    def create(self, position):
        if len(self.__shots) >= self.__max_shots:
            return
        self.__shots.append(position)
        self.shoot_sound.play()

    def destroy_shot(self, sid):
        if sid < len(self.__shots):
            del(self.__shots[sid])

    def areas(self):
        areas = []
        for sid in self.__shots:
            areas.append(pygame.Rect(sid[0], sid[1], self.__sw, self.__sh))
        return areas

    def update(self):
        destroy = []
        for sid in range(len(self.__shots)):
            if self.__shots[sid][1] < -self.__sh:
                destroy.append(sid)
            self.__layout.blit(self.shoot, self.__shots[sid])
            self.__shots[sid] = (self.__shots[sid][0],
                                 self.__shots[sid][1] - 10)
        for d in destroy:
            del(self.__shots[d])

class Game:
    def __init__(self, screen):

        self.__clock = pygame.time.Clock()

        self.__scr = screen

        self.__playground = ImageRegistry().get_image('data/playground.png')
        self.__scr.blit(ImageRegistry().get_image('data/background.png'),
                        (0, 0))

        self.space = Space(self.__playground)
        self.player = Player(self.__playground)
        self.pshots = PlayerShoot(self.__playground, 2)
        self.asteroids = AsteroidField(self.__playground)

        self.laser = None

    def run(self):

        while 1:

            self.__clock.tick(GAME_FPS)

            if random.randint(1, 20) == 3:
                self.asteroids.create_asteroid()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    return
                elif (event.type == pygame.KEYDOWN and
                      event.key == pygame.K_ESCAPE):
                    return
                elif (event.type == pygame.KEYDOWN and
                      event.key == pygame.K_LEFT):
                    self.player.set_speed(-4)
                elif (event.type == pygame.KEYDOWN and
                      event.key == pygame.K_RIGHT):
                    self.player.set_speed(4)
                elif ((event.type == pygame.KEYUP) and
                      (event.key == pygame.K_LEFT) and
                      (self.player.max_v == -4)):
                    self.player.set_speed(0)
                elif ((event.type == pygame.KEYUP) and
                      (event.key == pygame.K_RIGHT) and
                      (self.player.max_v == 4)):
                    self.player.set_speed(0)
                elif (event.type == pygame.KEYDOWN and
                      event.key == pygame.K_SPACE) and not self.laser:
                    self.pshots.create(self.player.laser_pos())

            # Draw everything
            self.space.update()
            self.pshots.update()
            self.asteroids.update(self.pshots)
            self.player.update()

            self.__scr.blit(self.__playground, (150, 0))
            pygame.display.flip()

if __name__ == '__main__':
    pygame.init()
    if '-win' in sys.argv:
        screen = pygame.display.set_mode((1024, 768))
    else:
        screen = pygame.display.set_mode((1024, 768), pygame.FULLSCREEN)

    # Load all images
    ImageRegistry().load_image('data/background.png')
    ImageRegistry().load_image('data/playground.png')
    ImageRegistry().load_image('data/shoot.png')
    ImageRegistry().load_image('data/ship.png')
    ImageRegistry().load_images('data/asteroid_1_')
    ImageRegistry().load_image('data/star1.png')
    ImageRegistry().load_image('data/star2.png')
    ImageRegistry().load_image('data/star3.png')

    game = Game(screen)
    game.run()
